<?php

namespace Tests\Feature;

use Corals\Modules\Payment\Common\Models\TaxClass;
use Corals\User\Models\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;

class PaymentTest extends TestCase
{
    use DatabaseTransactions;

    protected $taxRequest;
    protected $tax;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $user = User::query()->whereHas('roles', function ($query) {
            $query->where('name', 'superuser');
        })->first();

        Auth::loginUsingId($user->id);
    }

    public function test_payment_view()
    {
        $response = $this->get('/payments/settings');

        $response->assertStatus(200)->assertViewIs('Payment::settings');

        $this->assertTrue(true);
    }

    public function test_create_tax()
    {
        $response = $this->get('/tax/tax-classes/create');

        $response->assertStatus(200)->assertViewIs('Payment::tax_classes.create_edit');

        $this->assertTrue(true);
    }

    public function test_store_tax()
    {
        $this->taxRequest = [
            'name' => 'testTaxName',
        ];

        $response = $this->post('/tax/tax-classes', $this->taxRequest);

        $this->tax = TaxClass::query()->where('name', $this->taxRequest['name'])->first();

        $response->assertDontSee('The given data was invalid')
            ->assertRedirect('/tax/tax-classes');

        $this->assertDatabaseHas('tax_classes', [
            'name' => $this->tax->name,
        ]);

        $this->assertTrue(true);
    }
}
